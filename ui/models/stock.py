from datetime import datetime

from pydantic import BaseModel, Field


class CompanyOfficer(BaseModel):
    name: str = Field(description="Name of the company officer.")
    title: str = Field(description="Title of the company officer.")
    age: int | None = Field(None, description="Age of the company officer.")
    fiscalYear: int | None = Field(None, description="Fiscal year for which compensation data is relevant.")
    totalPay: int | None = Field(None, description="Total compensation for the company officer.")


class CompanyDetails(BaseModel):
    longName: str = Field(alias="longName", description="The full name of the company.")
    symbol: str = Field(description="The stock ticker symbol of the company.")
    address1: str = Field(description="The primary street address of the company.")
    city: str = Field(description="The city where the company is located.")
    state: str = Field(description="The state where the company is located.")
    zip: str = Field(description="The zip code of the company's address.")
    country: str = Field(description="The country where the company is located.")
    phone: str = Field(description="The main phone number of the company.")
    website: str = Field(description="The official website URL of the company.")
    industry: str = Field(description="The industry the company operates in.")
    sector: str = Field(description="The sector the company belongs to.")
    longBusinessSummary: str = Field(description="A detailed summary of the company's business operations.")
    fullTimeEmployees: int = Field(description="The total number of full-time employees.")
    companyOfficers: list[CompanyOfficer] = Field(description="A list of key company officers and their details.")
    currentPrice: float = Field(description="The current trading price of the stock.")
    marketCap: int = Field(description="The total market capitalization of the company.")
    sharesOutstanding: int = Field(description="The total number of shares outstanding.")
    profitMargins: float = Field(description="The company's profit margin.")
    returnOnEquity: float = Field(description="The return on equity, indicating profitability relative to equity.")
    totalRevenue: int = Field(description="The total revenue generated by the company.")
    grossProfits: int = Field(description="The gross profit of the company.")
    freeCashflow: int | None = Field(None, description="The company's free cash flow.")
    operatingCashflow: int | None = Field(None, description="The cash generated from regular business operations.")
    totalCash: int = Field(description="The total cash and cash equivalents held by the company.")
    totalDebt: int = Field(description="The total debt owed by the company.")
    revenueGrowth: float = Field(description="The year-over-year revenue growth rate.")
    lastFiscalYearEnd: int | None = Field(None, description="The timestamp of the last fiscal year end.")
    mostRecentQuarter: int | None = Field(None, description="The timestamp of the most recent financial quarter.")
    earningsTimestamp: int | None = Field(None, description="The timestamp of the last reported earnings.")


class StockMetadata(BaseModel):
    symbol: str = Field(description="Stock ticker symbol")
    company_name: str | None = Field(None, description="Full name of the company")
    sector: str | None = Field(None, description="Market sector of the company")
    industry: str | None = Field(None, description="Specific industry classification")
    market_cap: int | None = Field(None, description="Market capitalization in billions")
    pe_ratio: float | None = Field(None, description="Price to earnings ratio")
    dividend_yield: float | None = Field(None, description="Annual dividend yield percentage")
    beta: float | None = Field(None, description="Measure of stock volatility relative to market")


class StockPrice(BaseModel):
    date: datetime = Field(description="Date of the stock price data")
    open: float = Field(description="Opening price of the stock")
    high: float = Field(description="Highest price during trading session")
    low: float = Field(description="Lowest price during trading session")
    close: float = Field(description="Closing price of the stock")
    adjusted_close: float = Field(description="Closing price adjusted for corporate actions")
    volume: int = Field(description="Number of shares traded")


class Financials(BaseModel):
    revenue: float | None = Field(None, description="Total revenue from sales")
    gross_profit: float | None = Field(None, description="Revenue minus cost of goods sold")
    operating_income: float | None = Field(None, description="Profit from operations")
    net_income: float | None = Field(None, description="Total profit after all expenses")
    total_assets: float | None = Field(None, description="Sum of all company assets")
    total_liabilities: float | None = Field(None, description="Sum of all company debts and obligations")
    shareholders_equity: float | None = Field(None, description="Net worth of the company")
    current_ratio: float | None = Field(None, description="Current assets divided by current liabilities")
    quick_ratio: float | None = Field(None, description="Liquid assets divided by current liabilities")
    return_on_equity: float | None = Field(None, description="Net income divided by shareholders equity")
    return_on_assets: float | None = Field(None, description="Net income divided by total assets")


class News(BaseModel):
    date: datetime = Field(description="Date of the news article")
    headline: str = Field(description="News article headline")
    # summary: str = Field(description="Summary of the article")
    content_type: str = Field(description="Type of content")
    # url: str = Field(description="URL of the news article")
    region: str | None = Field(None, description="Region where the news originated")
    provider: str | None = Field(None, description="Provider of the news")


class StockData(BaseModel):
    company: CompanyDetails = Field(description="Company details")
    metadata: StockMetadata = Field(description="General information about the stock")
    prices: list[StockPrice] = Field(description="Historical price data")
    financials: Financials = Field(description="Financial metrics and ratios")
    news: list[News] = Field(description="Related news articles")
